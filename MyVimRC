set autoindent
set smartindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set nu
set wildmenu
set wildmode=full
set relativenumber
set bs=indent,eol,start
set statusline=%f
set laststatus=2
set timeoutlen=1000
set ttimeoutlen=100
set lines=60
set columns=150
set hlsearch
set guifont=Consolas:h12
set colorcolumn=80
" set shell=pwsh

" au GUIEnter * simalt ~x
function! SetTextSize()
	set fullscreen
	" set lines=999
	" set columns=999
	sleep 1000m
	redraw!
	echo &lines
	" sleep 3000m
	let newSize=&lines/60.0*12.0
	exec "set guifont=Consolas:h" . string(float2nr(ceil(newSize)))
	" echo string(float2nr(ceil(newSize)))
	set nofullscreen
	redraw!
	set lines=60
	set columns=120
	echo newSize
	sleep
endfunction

function! EchoIfDebug(msg)
	if exists("s:debug") && s:debug == 1
		echo a:msg
	endif
endfunction

"commands are:
"Resize <h/v (horizontal or vertical)> <percentage of current (1.0 = same
"size)>
"HResize <size>
"VResize <size>
function! Resize(direction, changeStr)
	"set s:debug to 1 to print debug messages!
	let s:debug=0

	if exists("g:NERDTree") && g:NERDTree.IsOpen()

		let l:NERDTreeWidth = winwidth(1)
		call EchoIfDebug("NERDTreeWidth: " . l:NERDTreeWidth)
	else

		call EchoIfDebug("NERDTree not found")
	endif

	if exists("l:changeStr")
		unlet l:changeStr
	endif
	try
		if a:direction ==? 'h'
			let l:direction = 'horizontal'
		else
			if a:direction ==? 'v'
				let l:direction = 'vertical'
			else
				call EchoIfDebug(a:direction . 'is not a valid direction, must be "h" or "v"')
				return
			endif
		endif
		call EchoIfDebug("Resize called with direction: '" . l:direction . "', input: '" . a:changeStr . "'")
		let l:changeStr = matchstr(a:changeStr, '^[-+]*[.0-9]*')
		if !exists("l:changeStr")
			throw "ERROR: size change string '" . a:changeStr . "' is not valid"
		else
			if l:changeStr == ''
				throw "size change string '" . a:changeStr . "' is not valid"
			else
				let l:echo_string = "parsed l:changeStr = '" . l:changeStr . "'"
				call EchoIfDebug(l:echo_string)
			endif
		endif
		if l:changeStr =~ '-.*'
			call EchoIfDebug('"decrease" requested')
			let l:resizeType = 'decrease_by'
			call EchoIfDebug("l:changeStr strpart: " . strpart(l:changeStr, 1))
			let l:changeAmt = 1 - str2float(strpart(l:changeStr, 1))
			if l:changeAmt < 0
				let l:changeAmt = 0
			endif
		else
			if l:changeStr =~ '+.*'
				call EchoIfDebug('"increase" requested')
				let l:resizeType = 'increase_by'
				call EchoIfDebug("l:changeStr strpart: " . strpart(l:changeStr, 1))
				let l:changeAmt = 1.0 + str2float(strpart(l:changeStr, 1))
			else
				call EchoIfDebug('"change to" requested')
				let l:resizeType = 'change_to'
				let l:changeAmt = str2float(l:changeStr)
				call EchoIfDebug("l:changeStr = " . l:changeStr . " l:changeAmt = " . string(l:changeAmt))
			endif
		endif
		if l:direction == 'horizontal'
			call EchoIfDebug("l:changeAmt = " . string(l:changeAmt))
			let l:new_width = str2float(winwidth(0)) * l:changeAmt
			call EchoIfDebug("immediate l:new_width: " . string(l:new_width))
			let l:new_width = float2nr(round(l:new_width))
			if exists("l:NERDTreeWidth")
				let l:max_width = &columns - l:NERDTreeWidth
			else
				let l:max_width = &columns
			endif
			if l:new_width > l:max_width
				call EchoIfDebug("Requested width (" . string(l:new_width) . ") greater)
							\ than max width (" . l:max_width . ")...setting
							\ width to full window width"
				let l:new_width = l:max_width
			endif
			call EchoIfDebug("current width: " . winwidth(0) . "    new width: " . l:new_width)
			call EchoIfDebug("vertical resize " . l:new_width)
			execute "vertical resize " . l:new_width
		else
			let l:new_height = winheight(0) * l:changeAmt
			let l:new_height = float2nr(round(l:new_height))
			if l:new_height > &lines
				let l:new_hight = &lines
			endif
			call EchoIfDebug("current height: " . winheight(0) . "    new height: " . l:new_height)
			call EchoIfDebug("resize " . l:new_height)
			execute "resize " . l:new_height
		endif

	if exists("l:NERDTreeWidth")
		let g:NERDTreeWinSize=l:NERDTreeWidth
	endif

	catch
		echo "Exception at line " . v:lnum . ": " . v:exception
	endtry

endfunction

:command! -nargs=+ Resize : call Resize(<f-args>)
:command! -nargs=1 HResize : call Resize('h', <f-args>)
:command! -nargs=1 VResize : call Resize('v', <f-args>)

"au GUIEnter * :call SetTextSize()<cr>

"colo murphy
" if has('gui_running')
" 	set background=dark
" 	colorscheme solarized
" else
" 	colorscheme zenburn
" endif

"call togglebg#map("<F5>")

set pythonthreedll=python311.dll

let g:python_highlight_all=1
let g:ConqueTerm_Color = 2
let g:conda_startup_msg_suppress = 1
syntax on

"python with virtualenv support
py << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
  execfile(activate_this, dict(__file__=activate_this))
EOF

" python-mode params
let g:pymode_run = 1
let g:pymode_run_bind = '<leader>r'
let g:pymode_rope_goto_definition_bind = '<C-c>g'
let g:pymode_rope_rename_bind = '<C-r>rr'

" PLC params
au BufNewFile,BufRead *.EXP set filetype=stplc
au BufNewFile,BufRead *.st set filetype=stplc
au BufNewFile,BufRead *.TcPOU set filetype=stplc
let rst_syntax_code_list = ['vim']
"syntax syntax-highlighting coloring

" g-code
au BufNewFile,BufRead *.nc set filetype=ngc

"type-specific params
au BufNewFile,BufRead #.py
    \ set tabstop=4
    \ set softtabstop=4
    \ set shiftwidth=4
    \ set expandtab
    \ set textwidth = 79
    \ set fileformat=unix
    \ set encoding=utf-8
let gpymode_python = 'python3'
au FileType python nnoremap <C-_> <S-I><#><space><Esc>
hi pythonSelf ctermfg=68 guifg=#5f87d7 cterm=bold gui=bold
let g:ale_linters = {'rust': ['rustc']}
let g:ale_completion_enabled = 0
let g:ale_on_text_changed = 1
let g:ale_sign_column_always = 1


au BufNewFile,BufRead #.js, #.html, #.css
    \ set tabstop=2
    \ set softtabstop=2
    \ set shiftwidth=2

"Flagging Unnecessary Whitespace
au BufRead,BufNewFile *.py,*.pyw highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
let g:pymode_python = 'python3'

"split navigations
nnoremap <C-J> <C-W><C-j>
nnoremap <C-K> <C-W><C-k>
nnoremap <C-L> <C-W><C-l>
nnoremap <C-H> <C-W><C-h>
set splitbelow
set splitright
nnoremap <C-W>h :call MoveWindow("left")<CR>
nnoremap <C-W>l :call MoveWindow("right")<CR>
nnoremap <C-W>k :call MoveWindow("up")<CR>
nnoremap <C-W>j :call MoveWindow("down")<CR>

" nnoremap <silent> GG :echo screencol()<CR>

function! MoveWindow(direction) abort
	let l:currBuf = bufnr("%")
	let l:currWin = winnr()

	if (a:direction=="left")
		:wincmd h
		let l:newBuf = bufnr("%")
		let l:newWin = winnr()

		execute "b". l:currBuf
		execute l:currWin. "wincmd w"
		execute "b". l:newBuf
		execute l:newWin. "wincmd w"
	elseif (a:direction=="right")
		:wincmd l
		let l:newBuf = bufnr("%")
		let l:newWin = winnr()

		execute "b". l:currBuf
		execute l:currWin. "wincmd w"
		execute "b". l:newBuf
		execute l:newWin. "wincmd w"
	elseif (a:direction=="up")
		:wincmd k
		let l:newBuf = bufnr("%")
		let l:newWin = winnr()

		execute "b". l:currBuf
		execute l:currWin. "wincmd w"
		execute "b". l:newBuf
		execute l:newWin. "wincmd w"
	elseif (a:direction=="down")
		:wincmd j
		let l:newBuf = bufnr("%")
		let l:newWin = winnr()

		execute "b". l:currBuf
		execute l:currWin. "wincmd w"
		execute "b". l:newBuf
		execute l:newWin. "wincmd w"
	endif
endfunction


"split resizing
nnoremap <lt> <C-W><lt>
"nnoremap > <C-W><gt>

"code folding
set foldmethod=indent
set foldlevel=99
nnoremap <space> za
let g:SimpylFold_docstring_preview=1

"YouCompleteMe params
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g :YcmCompleter GoToDefinitionElseDeclaration<CR>
let g:pymode_lint_checkers = ['pep8']

" supertab options
let g:SuperTabDefaultCompletionType = "<c-n>"
let g:SuperTabContextDefaultCompletionType = "<c-n>"
set nocompatible
filetype on

"NERDtree 
autocmd StdinReadPre * let s:std_in=1
" au User NERDtreeInit let b:NERDTreeRoot = b:NERDTree.root

"GLOBAL MAPPINGS
imap hh <esc>
nnoremap <silent> [<space>  :<c-u>put!=repeat([''],v:count)<bar>']+1<cr>
nnoremap <silent> ]<space>  :<c-u>put =repeat([''],v:count)<bar>'[-1<cr>
nnoremap <silent> <S-space> :<c-u>put!=repeat([''],v:count)<bar>']<cr>
" bubble single lines
function! BubbleSingleUp()
	silent norm ddkP
endfunction
function! BubbleSingleDown()
	silent norm ddp
endfunction
nmap <C-Up> :call BubbleSingleUp()<cr>
nmap <C-Down> :call BubbleSingleDown()<cr>
" bubble multiple lines
function! BubbleMultUp()
	norm '<dv'>kP
endfunction
function! BubbleMultDown()
	silent norm '<`<dv`>p
	norm `[V`]
endfunction
vmap <C-Up> :<backspace><backspace><backspace><backspace><backspace>norm '<d'>kP`[V`]<cr>
vmap <C-Down> :<backspace><backspace><backspace><backspace><backspace>norm '<d'>p`[V`]<cr>
" delete without yanking
nnoremap <leader>d "_d
vnoremap <leader>d "_d

" replace currently selected text with default register
" without yanking it
vnoremap <leader>p "_dP

if (has('win32') || has('win64'))
	set rtp+=$HOME\vimfiles\bundle\Vundle.vim
	let VundlePath = '$HOME\vimfiles\bundle\'
	noremap <C-s> :source $HOME\_vimrc<cr>
	au FileType python nnoremap <buffer> <F5> :exec 'w !python' shellescape(@%, 1)<cr>
else
	set rtp+=$HOME/.vim/bundle/Vundle.vim
	let VundlePath = '$HOME/.vim/bundle/'
	nnoremap <C-s> :source $HOME/.vimrc<cr>
	au FileType python nnoremap <buffer> <F5> :exec 'w !python3' shellescape(@%, 1)<cr>
endif
" echo VundlePath
" set rtp+=VundlePath

" let g:vundle_default_git_proto="http"

call vundle#begin(VundlePath)

Plugin 'VundleVim/Vundle.vim'
"Plugin 'Valloric/YouCompleteMe'
"Plugin 'ncm2/ncm2'
Plugin 'ervandew/supertab'
Plugin 'palantir/python-language-server'
Plugin 'prabirshrestha/async.vim'
Plugin 'prabirshrestha/vim-lsp'
Plugin 'prabirshrestha/asyncomplete.vim'
Plugin 'prabirshrestha/asyncomplete-lsp.vim'
"Plugin 'maralla/completor.vim'
Plugin 'ryanolsonx/vim-lsp-python'
Plugin 'ludovicchabant/vim-gutentags'
Plugin 'tpope/vim-surround'
Plugin 'flazz/vim-colorschemes'
Plugin 'Conque-GDB'
Plugin 'scrooloose/NERDtree'
Plugin 'tmhedberg/SimpylFold'
Plugin 'vim-scripts/indentpython.vim'
"Plugin 'vim-syntastic/syntastic'
Plugin 'w0rp/ale'
Plugin 'davidhalter/jedi-vim'
Plugin 'nvie/vim-flake8'
Plugin 'kien/ctrlp.vim'
Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
Plugin 'jnurmine/Zenburn'
Plugin 'altercation/vim-colors-solarized'
"Plugin 'vim-python/python-syntax'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-rhubarb'
Plugin 'tpope/vim-unimpaired'
Plugin 'whiteinge/diffconflicts'
"Plugin 'jeetsukumaran/vim-pythonsense'
Plugin 'cjrh/vim-conda'
Plugin 'SQLComplete.vim'
"Plugin 'python-mode/python-mode'
Plugin 'tompinkas/st-syntax.vim'
Plugin 'sellout/Structured-Text'
"Plugin 'cosminadrianpopescu/vim-sql-workbench'
" Plugin 'hdima/python-syntax'
" Plugin 'prettier/vim-prettier', {
" 	\ 'do': 'yarn install',
" 	\ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphq1', 'markdown', 'vue', 'yaml', 'html']}
Plugin 'gregjurman/vim-nc'
Plugin 'tomasiser/vim-code-dark'
Plugin 'mhinz/vim-startify'
Plugin 'fatih/vim-go'
Plugin 'alvan/vim-closetag'

call vundle#end()
filetype plugin indent on

"FAITH/VIM-GO SETTINGS
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'

"ALVAN/VIM-CLOSING SETTINGS
let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.xml'

" filenames like *.xml, *.html, *.xhtml, ...
" These are the file extensions where this plugin is enabled.
"
let g:closetag_filenames = '*.html,*.xhtml,*.phtml'

" filenames like *.xml, *.xhtml, ...
" This will make the list of non-closing tags self-closing in the specified files.
"
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx'

" filetypes like xml, html, xhtml, ...
" These are the file types where this plugin is enabled.
"
let g:closetag_filetypes = 'html,xhtml,phtml'

" filetypes like xml, xhtml, ...
" This will make the list of non-closing tags self-closing in the specified files.
"
let g:closetag_xhtml_filetypes = 'xhtml,jsx'

" integer value [0|1]
" This will make the list of non-closing tags case-sensitive (e.g. `<Link>` will be closed while `<link>` won't.)
"
let g:closetag_emptyTags_caseSensitive = 1

" dict
" Disables auto-close if not in a "valid" region (based on filetype)
"
let g:closetag_regions = {
    \ 'typescript.tsx': 'jsxRegion,tsxRegion',
    \ 'javascript.jsx': 'jsxRegion',
    \ 'typescriptreact': 'jsxRegion,tsxRegion',
    \ 'javascriptreact': 'jsxRegion',
    \ }

" Shortcut for closing tags, default is '>'
"
let g:closetag_shortcut = '>'

" Add > at current position without closing the current tag, default is ''
"
let g:closetag_close_shortcut = '<leader>>'


" python from powerline.vim import setup as powerline_setup
" python powerline_setup()
" python del powerline_setup

"STARTIFY
  function! s:list_commits()
    let git = 'git -C ~/repo'
    let commits = systemlist(git .' log --oneline | head -n10')
    let git = 'G'. git[1:]
    return map(commits, '{"line": matchstr(v:val, "\\s\\zs.*"), "cmd": "'. git .' show ". matchstr(v:val, "^\\x\\+") }')
  endfunction

  let g:startify_bookmarks = [
		\ { 'c': expand('<sfile>') },
		\ ]
		

  let g:startify_lists = [
        \ { 'header': ['   MRU'],            'type': 'files' },
        \ { 'header': ['   MRU '. getcwd()], 'type': 'dir' },
   	    \ { 'header': ['   Bookmarks'],      'type': 'bookmarks' },
        \ { 'header': ['   Sessions'],       'type': 'sessions' },
        \ { 'header': ['   Commits'],        'type': function('s:list_commits') },
        \ ]

  let g:startify_session_before_save = [
		\ 'echo "Cleaning up before saving..."',
		\ 'silent! NERDTreeTabsClose'
		\ ]
  let g:startify_enable_unsafe=1
  let NERDTreeHijackNetrw = 0
  set sessionoptions-=blank



let g:codedark_term256=1
colorscheme codedark

if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ })
endif

set statusline+=%{gutentags#statusline()}
set statusline+=%{fugitive#statusline()}

let g:NERDTreeWinSize=31

autocmd VimEnter * 
	\ if argc() == 0 && !exists("s:std_in")
	\ | Startify
	\ | NERDTree
	\ | wincmd w
	\ |endif

highlight Pmenu ctermbg=blue guibg=blue
set diffopt +=iwhite
set diffexpr=""
cd $HOME

