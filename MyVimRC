set autoindent
set smartindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set nu
set wildmenu
set wildmode=full
set relativenumber
set bs=indent,eol,start
set statusline=%f
set laststatus=2
set timeoutlen=1000
set ttimeoutlen=100
colorscheme torte
set guifont=Consolas:h9

"colo murphy
" if has('gui_running')
" 	set background=dark
" 	colorscheme solarized
" else
" 	colorscheme zenburn
" endif

"call togglebg#map("<F5>")

set pythonthreedll=python37.dll

let g:python_highlight_all=1
let g:ConqueTerm_Color = 2
let g:conda_startup_msg_suppress = 1
syntax on

" python-mode params
let g:pymode_run = 1
let g:pymode_run_bind = '<leader>r'
let g:pymode_rope_goto_definition_bind = '<C-c>g'
let g:pymode_rope_rename_bind = '<C-r>rr'

" PLC params
au BufNewFile,BufRead *.EXP set filetype=stplc
au BufNewFile,BufRead *.st set filetype=stplc
let rst_syntax_code_list = ['vim']
"syntax syntax-highlighting coloring

"type-specific params
au BufNewFile,BufRead #.py
    \ set tabstop=4
    \ set softtabstop=4
    \ set shiftwidth=4
    \ set expandtab
    \ set textwidth = 79
    \ set fileformat=unix
    \ set encoding=utf-8
let gpymode_python = 'python3'
au FileType python nnoremap <buffer> <F9> :exec 'w !python3' shellescape(@%, 1)<cr>
au FileType python nnoremap <C-/> <S-I><#>
hi pythonSelf ctermfg=68 guifg=#5f87d7 cterm=bold gui=bold
let g:ale_linters = {'rust': ['rustc']}
let g:ale_completion_enabled = 0
let g:ale_on_text_changed = 1
let g:ale_sign_column_always = 1


au BufNewFile,BufRead #.js, #.html, #.css
    \ set tabstop=2
    \ set softtabstop=2
    \ set shiftwidth=2

"Flagging Unnecessary Whitespace
au BufRead,BufNewFile *.py,*.pyw highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
let g:pymode_python = 'python3'

"split navigations
nnoremap <C-J> <C-W><C-j>
nnoremap <C-K> <C-W><C-k>
nnoremap <C-L> <C-W><C-l>
nnoremap <C-H> <C-W><C-h>
set splitbelow
set splitright

"split resizing
nnoremap <lt> <C-W><lt>
"nnoremap > <C-W><gt>

"code folding
set foldmethod=indent
set foldlevel=99
nnoremap <space> za
let g:SimpylFold_docstring_preview=1

"YouCompleteMe params
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g :YcmCompleter GoToDefinitionElseDeclaration<CR>
let g:pymode_lint_checkers = ['pep8']

" supertab options
let g:SuperTabDefaultCompletionType = "<c-n>"
let g:SuperTabContextDefaultCompletionType = "<c-n>"
set nocompatible
filetype on

"NERDtree 
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" au User NERDtreeInit let b:NERDTreeRoot = b:NERDTree.root

"GLOBAL MAPPINGS
imap hh <esc>
" bubble single lines
function! BubbleSingleUp()
	silent norm ddkP
endfunction
function! BubbleSingleDown()
	silent norm ddp
endfunction
nmap <C-Up> :call BubbleSingleUp()<cr>
nmap <C-Down> :call BubbleSingleDown()<cr>
" bubble multiple lines
function! BubbleMultUp()
	norm '<dv'>kP
endfunction
function! BubbleMultDown()
	silent norm '<`<dv`>p
	norm `[V`]
endfunction
vmap <C-Up> :<backspace><backspace><backspace><backspace><backspace>norm '<d'>kP`[V`]<cr>
vmap <C-Down> :<backspace><backspace><backspace><backspace><backspace>norm '<d'>p`[V`]<cr>


if (has('win32') || has('win64'))
	set rtp+=$HOME\vimfiles\bundle\Vundle.vim
	let VundlePath = '$HOME\vimfiles\bundle\'
	noremap <C-s> :source $HOME\_vimrc<cr>
else
	set rtp+=$HOME/.vim/bundle/Vundle.vim
	let VundlePath = '$HOME/.vim/bundle/Vundle.vim'
	nnoremap <C-s> :source $HOME/.vimrc<cr>
endif
" echo VundlePath
" set rtp+=VundlePath

" let g:vundle_default_git_proto="http"

call vundle#begin(VundlePath)

Plugin 'VundleVim/Vundle.vim'
" Plugin 'Valloric/YouCompleteMe'
Plugin 'ncm2/ncm2'
Plugin 'ervandew/supertab'
Plugin 'palantir/python-language-server'
Plugin 'prabirshrestha/async.vim'
Plugin 'prabirshrestha/vim-lsp'
Plugin 'prabirshrestha/asyncomplete.vim'
Plugin 'prabirshrestha/asyncomplete-lsp.vim'
Plugin 'maralla/completor.vim'
Plugin 'ryanolsonx/vim-lsp-python'
Plugin 'ludovicchabant/vim-gutentags'
Plugin 'tpope/vim-surround'
Plugin 'flazz/vim-colorschemes'
Plugin 'Conque-GDB'
Plugin 'scrooloose/NERDtree'
Plugin 'tmhedberg/SimpylFold'
Plugin 'vim-scripts/indentpython.vim'
"Plugin 'vim-syntastic/syntastic'
Plugin 'w0rp/ale'
Plugin 'davidhalter/jedi-vim'
Plugin 'nvie/vim-flake8'
Plugin 'kien/ctrlp.vim'
Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
Plugin 'jnurmine/Zenburn'
Plugin 'altercation/vim-colors-solarized'
Plugin 'vim-python/python-syntax'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-rhubarb'
Plugin 'jeetsukumaran/vim-pythonsense'
Plugin 'cjrh/vim-conda'
Plugin 'SQLComplete.vim'
Plugin 'python-mode/python-mode'
Plugin 'tompinkas/st-syntax.vim'
"Plugin 'cosminadrianpopescu/vim-sql-workbench'
" Plugin 'hdima/python-syntax'
" Plugin 'prettier/vim-prettier', {
" 	\ 'do': 'yarn install',
" 	\ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphq1', 'markdown', 'vue', 'yaml', 'html']}

call vundle#end()
filetype plugin indent on

if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ })
endif

set statusline+=%{gutentags#statusline()}
set statusline+=%{fugitive#statusline()}

highlight Pmenu ctermbg=blue guibg=blue
